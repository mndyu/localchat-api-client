/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * localchat API server
 * localchat API server
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccessGroup
 */
export interface AccessGroup {
    /**
     * 
     * @type {number}
     * @memberof AccessGroup
     */
    gid?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessGroup
     */
    uid?: number;
}

/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    group?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface GeneralError
 */
export interface GeneralError {
    /**
     * 
     * @type {number}
     * @memberof GeneralError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof GeneralError
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface GroupJoin
 */
export interface GroupJoin {
    /**
     * 
     * @type {boolean}
     * @memberof GroupJoin
     */
    myself?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GroupJoin
     */
    user_id?: number;
}

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    author?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    channel?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    text?: number;
}

/**
 * 
 * @export
 * @interface MessagePost
 */
export interface MessagePost {
    /**
     * 
     * @type {string}
     * @memberof MessagePost
     */
    text?: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    ip_address?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    pc_name?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary グループ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options: any = {}): FetchArgs {
            const localVarPath = `/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ削除
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete(group_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDelete.');
            }
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdGet.');
            }
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ内メンバー一覧取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersGet.');
            }
            const localVarPath = `/groups/{group_id}/members`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ参加
         * @param {number} group_id グループID
         * @param {GroupJoin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersPost(group_id: number, body: GroupJoin, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsGroupIdMembersPost.');
            }
            const localVarPath = `/groups/{group_id}/members`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GroupJoin" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ内のメンバー削除
         * @param {number} group_id グループID
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: number, user_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            const localVarPath = `/groups/{group_id}/members/{user_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary group のメッセージ一送信
         * @param {number} group_id グループID
         * @param {MessagePost} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMessagesPost(group_id: number, body: MessagePost, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMessagesPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsGroupIdMessagesPost.');
            }
            const localVarPath = `/groups/{group_id}/messages`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MessagePost" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ更新
         * @param {number} group_id グループID
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: number, body: Group, options: any = {}): FetchArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsGroupIdPut.');
            }
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary グループ作成
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(body: Group, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsPost.');
            }
            const localVarPath = `/groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesGet(options: any = {}): FetchArgs {
            const localVarPath = `/messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージの削除
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdDelete.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージの取得
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdGet.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージの更新
         * @param {number} message_id メッセージID
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: number, body: Message, options: any = {}): FetchArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling messagesMessageIdPut.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Message" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メッセージの作成
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(body: Message, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling messagesPost.');
            }
            const localVarPath = `/messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Message" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 自分のユーザ表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(options: any = {}): FetchArgs {
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザ一覧
         * @param {number} [limit] ページの要素数
         * @param {number} [offset] ページ開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザ
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(body: User, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersPost.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary １ユーザ削除
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(user_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling usersUserIdDelete.');
            }
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary １ユーザ取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(user_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling usersUserIdGet.');
            }
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ？？
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet(user_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling usersUserIdGroupsGet.');
            }
            const localVarPath = `/users/{user_id}/groups`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザのメッセージ一覧取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdMessagesGet(user_id: number, options: any = {}): FetchArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling usersUserIdMessagesGet.');
            }
            const localVarPath = `/users/{user_id}/messages`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary １ユーザ更新
         * @param {number} user_id ユーザID
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut(user_id: number, body: User, options: any = {}): FetchArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling usersUserIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPut.');
            }
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary グループ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ削除
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete(group_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdDelete(group_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdGet(group_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ内メンバー一覧取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Group>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdMembersGet(group_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ参加
         * @param {number} group_id グループID
         * @param {GroupJoin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersPost(group_id: number, body: GroupJoin, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupJoin> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdMembersPost(group_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ内のメンバー削除
         * @param {number} group_id グループID
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: number, user_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary group のメッセージ一送信
         * @param {number} group_id グループID
         * @param {MessagePost} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMessagesPost(group_id: number, body: MessagePost, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdMessagesPost(group_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ更新
         * @param {number} group_id グループID
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: number, body: Group, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsGroupIdPut(group_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary グループ作成
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(body: Group, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupsPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Message>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).messagesGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary メッセージの削除
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).messagesMessageIdDelete(message_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary メッセージの取得
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).messagesMessageIdGet(message_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary メッセージの更新
         * @param {number} message_id メッセージID
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: number, body: Message, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).messagesMessageIdPut(message_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary メッセージの作成
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(body: Message, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).messagesPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 自分のユーザ表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ユーザ一覧
         * @param {number} [limit] ページの要素数
         * @param {number} [offset] ページ開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersGet(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ユーザ
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary １ユーザ削除
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(user_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersUserIdDelete(user_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary １ユーザ取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(user_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersUserIdGet(user_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ？？
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet(user_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersUserIdGroupsGet(user_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ユーザのメッセージ一覧取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdMessagesGet(user_id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersUserIdMessagesGet(user_id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary １ユーザ更新
         * @param {number} user_id ユーザID
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut(user_id: number, body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).usersUserIdPut(user_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary グループ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options?: any) {
            return DefaultApiFp(configuration).groupsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ削除
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete(group_id: number, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdDelete(group_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: number, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdGet(group_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ内メンバー一覧取得
         * @param {number} group_id グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: number, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdMembersGet(group_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ参加
         * @param {number} group_id グループID
         * @param {GroupJoin} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersPost(group_id: number, body: GroupJoin, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdMembersPost(group_id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ内のメンバー削除
         * @param {number} group_id グループID
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: number, user_id: number, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary group のメッセージ一送信
         * @param {number} group_id グループID
         * @param {MessagePost} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMessagesPost(group_id: number, body: MessagePost, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdMessagesPost(group_id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ更新
         * @param {number} group_id グループID
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: number, body: Group, options?: any) {
            return DefaultApiFp(configuration).groupsGroupIdPut(group_id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary グループ作成
         * @param {Group} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(body: Group, options?: any) {
            return DefaultApiFp(configuration).groupsPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary メッセージ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesGet(options?: any) {
            return DefaultApiFp(configuration).messagesGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary メッセージの削除
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: number, options?: any) {
            return DefaultApiFp(configuration).messagesMessageIdDelete(message_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary メッセージの取得
         * @param {number} message_id メッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: number, options?: any) {
            return DefaultApiFp(configuration).messagesMessageIdGet(message_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary メッセージの更新
         * @param {number} message_id メッセージID
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: number, body: Message, options?: any) {
            return DefaultApiFp(configuration).messagesMessageIdPut(message_id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary メッセージの作成
         * @param {Message} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(body: Message, options?: any) {
            return DefaultApiFp(configuration).messagesPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 自分のユーザ表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(options?: any) {
            return DefaultApiFp(configuration).profileGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary ユーザ一覧
         * @param {number} [limit] ページの要素数
         * @param {number} [offset] ページ開始位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).usersGet(limit, offset, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ユーザ
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(body: User, options?: any) {
            return DefaultApiFp(configuration).usersPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary １ユーザ削除
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(user_id: number, options?: any) {
            return DefaultApiFp(configuration).usersUserIdDelete(user_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary １ユーザ取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(user_id: number, options?: any) {
            return DefaultApiFp(configuration).usersUserIdGet(user_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ？？
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet(user_id: number, options?: any) {
            return DefaultApiFp(configuration).usersUserIdGroupsGet(user_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ユーザのメッセージ一覧取得
         * @param {number} user_id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdMessagesGet(user_id: number, options?: any) {
            return DefaultApiFp(configuration).usersUserIdMessagesGet(user_id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary １ユーザ更新
         * @param {number} user_id ユーザID
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut(user_id: number, body: User, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPut(user_id, body, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary グループ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGet(options?: any) {
        return DefaultApiFp(this.configuration).groupsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ削除
     * @param {number} group_id グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdDelete(group_id: number, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdDelete(group_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ取得
     * @param {number} group_id グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdGet(group_id: number, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdGet(group_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ内メンバー一覧取得
     * @param {number} group_id グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdMembersGet(group_id: number, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdMembersGet(group_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ参加
     * @param {number} group_id グループID
     * @param {GroupJoin} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdMembersPost(group_id: number, body: GroupJoin, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdMembersPost(group_id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ内のメンバー削除
     * @param {number} group_id グループID
     * @param {number} user_id ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdMembersUserIdDelete(group_id: number, user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary group のメッセージ一送信
     * @param {number} group_id グループID
     * @param {MessagePost} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdMessagesPost(group_id: number, body: MessagePost, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdMessagesPost(group_id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ更新
     * @param {number} group_id グループID
     * @param {Group} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGroupIdPut(group_id: number, body: Group, options?: any) {
        return DefaultApiFp(this.configuration).groupsGroupIdPut(group_id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary グループ作成
     * @param {Group} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsPost(body: Group, options?: any) {
        return DefaultApiFp(this.configuration).groupsPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary メッセージ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesGet(options?: any) {
        return DefaultApiFp(this.configuration).messagesGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary メッセージの削除
     * @param {number} message_id メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesMessageIdDelete(message_id: number, options?: any) {
        return DefaultApiFp(this.configuration).messagesMessageIdDelete(message_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary メッセージの取得
     * @param {number} message_id メッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesMessageIdGet(message_id: number, options?: any) {
        return DefaultApiFp(this.configuration).messagesMessageIdGet(message_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary メッセージの更新
     * @param {number} message_id メッセージID
     * @param {Message} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesMessageIdPut(message_id: number, body: Message, options?: any) {
        return DefaultApiFp(this.configuration).messagesMessageIdPut(message_id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary メッセージの作成
     * @param {Message} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesPost(body: Message, options?: any) {
        return DefaultApiFp(this.configuration).messagesPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 自分のユーザ表示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileGet(options?: any) {
        return DefaultApiFp(this.configuration).profileGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ユーザ一覧
     * @param {number} [limit] ページの要素数
     * @param {number} [offset] ページ開始位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersGet(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).usersGet(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ユーザ
     * @param {User} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersPost(body: User, options?: any) {
        return DefaultApiFp(this.configuration).usersPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary １ユーザ削除
     * @param {number} user_id ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdDelete(user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdDelete(user_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary １ユーザ取得
     * @param {number} user_id ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdGet(user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdGet(user_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ？？
     * @param {number} user_id ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdGroupsGet(user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdGroupsGet(user_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ユーザのメッセージ一覧取得
     * @param {number} user_id ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdMessagesGet(user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdMessagesGet(user_id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary １ユーザ更新
     * @param {number} user_id ユーザID
     * @param {User} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPut(user_id: number, body: User, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPut(user_id, body, options)(this.fetch, this.basePath);
    }

}

